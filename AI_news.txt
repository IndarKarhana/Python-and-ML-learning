Computer Vision Researcher Develops Privacy Software for Surveillance Videos - https://www.ucf.edu/news/computer-vision-researcher-develops-privacy-software-for-surveillance-videos/
Computer vision accelerates surveillance analysis, posing privacy concerns. UCF researchers develop software funded by NSF ART to obscure faces and details in real time. Targeting edge devices, emphasis on speed and efficiency. Work expands CRCV's efforts, addressing privacy in surveillance while enhancing society's navigation through computer vision.

AI to Autonomously Design New Drugs Soon - https://www.cnbc.com/2024/05/05/within-a-few-years-generative-ai-will-design-new-drugs-on-its-own.html
Major pharmaceutical companies use generative AI to rapidly design new drug molecules at unprecedented scale. AI generates as many designs in minutes as traditional labs in a year. Surprisingly, some AI-generated "weird" molecular structures showed potential as drugs, opening new creative pathways. Executives believe AI will autonomously generate new medicines soon, reshaping drug discovery and scientific methods. A pivotal moment was when AI could predict protein structures from amino acids, key for drug development.

Generative AI: Unleashing or Undermining Human Creativity? - https://news.uga.edu/generative-ai-and-creativity/
As artificial intelligence progresses, the dialogue surrounding AI and creativity grows nuanced. Is creativity something computable, innate, or a blend? Research ties creativity to memory, proposing that semantic memory, our repository of foundational knowledge, fuels imagination. AI tools also boast semantic memory, raising questions about their impact on creativity. Despite AI's role in creative tasks, maintaining human creativity remains essential.

Enhancing AI and Image Processing Security through Verification Techniques - https://techxplore.com/news/2024-04-verification-techniques-ai-image.html
Researchers have developed a novel framework that improves the efficiency and practicality of verifiable computing, enabling unforgeable guarantees of correct data processing. The modular approach combines the performance advantages of custom solutions with the versatility of general-purpose proof systems. It demonstrates practical applications in artificial intelligence and image processing, enhancing integrity, fairness, and privacy in outsourced data processing tasks.

AI Boosts Wind Power Revenue, Shrinks Land Use - https://techxplore.com/news/2024-05-lab-ai-results-revenue-decreased.html
Researchers from the U.S. Department of Energy's National Renewable Energy Laboratory (NREL) propose using AI to optimize wind plant designs, aiming to enhance revenue and reduce land use. Their AI model, WPGNN, trained on vast simulations, identifies optimal layouts and operations, particularly focusing on wake steering strategies. Results show potential land savings of up to 60%, equivalent to 28% of the U.S. wind energy footprint, along with consistent cost reductions. High-performance computing resources facilitated this groundbreaking research.

from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler
import numpy as np
import pandas as pd

# Sample data (replace this with your actual DataFrame)
X = np.random.rand(5000, 730)
df = pd.DataFrame(X)

# Normalize features
scaler = StandardScaler()
X_normalized = scaler.fit_transform(X)

# Define feature weights (higher weights for higher columns)
weights = np.arange(1, 731)  # Example: weights increase linearly with column number

# Initialize KNN model with weighted distances
knn = NearestNeighbors(n_neighbors=4, algorithm='brute', metric='wminkowski', metric_params={'w': weights})

# Fit the model
knn.fit(X_normalized)

# Example query
query_data = np.random.rand(1, 730)  # Your query data point with 730 features
query_data_normalized = scaler.transform(query_data)  # Normalize query data

# Find nearest neighbors and their distances
distances, indices = knn.kneighbors(query_data_normalized)

# Remove the first index (query point itself) from indices and distances
indices = indices[0][1:]
distances = distances[0][1:]

# Print IDs and distances of nearest neighbors
print("Nearest neighbors IDs:")
for idx, dist in zip(indices, distances):
    print(f"ID: {df.index[idx]}, Distance: {dist}")


